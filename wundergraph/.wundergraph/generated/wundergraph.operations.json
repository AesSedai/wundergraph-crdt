{
  "graphql_operation_files": [
    {
      "operation_name": "CrdtAuthors",
      "api_mount_path": "CrdtAuthors",
      "file_path": "CrdtAuthors.graphql",
      "content": "subscription CrdtAuthors($limit: Int!, $sv: String! @hooksVariable, $clientId: String! @hooksVariable, $guid: String! @hooksVariable ){hasura_authors(limit: $limit, order_by: [{created_at: asc},{id: asc}]){__typename id name updated_at books(order_by: [{created_at: asc},{id: asc}]){__typename id title isbn updated_at}}}"
    },
    {
      "operation_name": "CreateBook",
      "api_mount_path": "CreateBook",
      "file_path": "CreateBook.graphql",
      "content": "mutation CreateBook($book: hasura_books_insert_input!){hasura_insert_books_one(object: $book){id}}"
    },
    {
      "operation_name": "CreateCrdt",
      "api_mount_path": "CreateCrdt",
      "file_path": "CreateCrdt.graphql",
      "content": "mutation CreateCrdt($crdt: hasura_crdt_insert_input!){hasura_insert_crdt_one(object: $crdt){__typename id guid client state vector}}"
    },
    {
      "operation_name": "DeleteBook",
      "api_mount_path": "DeleteBook",
      "file_path": "DeleteBook.graphql",
      "content": "mutation DeleteBook($id: String!){hasura_delete_books_by_pk(id: $id){id}}"
    },
    {
      "operation_name": "QueryClient",
      "api_mount_path": "QueryClient",
      "file_path": "QueryClient.graphql",
      "content": "query QueryClient($client: String!, $room: String!){hasura_clients(where: {client: {_eq: $client},crdt: {room: {_eq: $room}}}){id vector}}"
    },
    {
      "operation_name": "QueryCrdt",
      "api_mount_path": "QueryCrdt",
      "file_path": "QueryCrdt.graphql",
      "content": "query QueryCrdt($room: String!){hasura_crdt(where: {room: {_eq: $room}}){id __typename client guid state vector}}"
    },
    {
      "operation_name": "QueryGetAuthors",
      "api_mount_path": "QueryGetAuthors",
      "file_path": "QueryGetAuthors.graphql",
      "content": "query QueryGetAuthors($limit: Int!){hasura_authors(limit: $limit, order_by: {name: asc}){__typename id name updated_at books(order_by: {title: desc}){__typename id title isbn updated_at}}}"
    },
    {
      "operation_name": "QueryGetBooks",
      "api_mount_path": "QueryGetBooks",
      "file_path": "QueryGetBooks.graphql",
      "content": "query QueryGetBooks($limit: Int!){hasura_books(limit: $limit, order_by: {title: asc}){__typename id title isbn updated_at author {__typename id name updated_at}}}"
    },
    {
      "operation_name": "ResetAuthors",
      "api_mount_path": "ResetAuthors",
      "file_path": "ResetAuthors.graphql",
      "content": "mutation ResetAuthors {hasura_delete_authors(where: {id: {_neq: \"0\"}}){affected_rows}}"
    },
    {
      "operation_name": "SeedAuthors",
      "api_mount_path": "SeedAuthors",
      "file_path": "SeedAuthors.graphql",
      "content": "mutation SeedAuthors($authors: [hasura_authors_insert_input!]!){hasura_insert_authors(objects: $authors){affected_rows}}"
    },
    {
      "operation_name": "SubscribeAuthors",
      "api_mount_path": "SubscribeAuthors",
      "file_path": "SubscribeAuthors.graphql",
      "content": "subscription SubscribeAuthors($limit: Int!){hasura_authors(limit: $limit, order_by: [{created_at: asc},{id: asc}]){__typename id name updated_at books(order_by: [{created_at: asc},{id: asc}]){__typename id title isbn updated_at}}}"
    },
    {
      "operation_name": "SubscribeBooks",
      "api_mount_path": "SubscribeBooks",
      "file_path": "SubscribeBooks.graphql",
      "content": "subscription SubscribeBooks($limit: Int!){hasura_books(limit: $limit, order_by: {title: asc}){__typename id title isbn updated_at author {__typename id name updated_at}}}"
    },
    {
      "operation_name": "UpdateAuthorName",
      "api_mount_path": "UpdateAuthorName",
      "file_path": "UpdateAuthorName.graphql",
      "content": "mutation UpdateAuthorName($id: String!, $name: String!){hasura_update_authors_by_pk(pk_columns: {id: $id}, _set: {name: $name}){id}}"
    },
    {
      "operation_name": "UpdateBook",
      "api_mount_path": "UpdateBook",
      "file_path": "UpdateBook.graphql",
      "content": "mutation UpdateBook($id: String!, $title: String!){hasura_update_books_by_pk(pk_columns: {id: $id}, _set: {title: $title}){id}}"
    },
    {
      "operation_name": "UpdateCrdt",
      "api_mount_path": "UpdateCrdt",
      "file_path": "UpdateCrdt.graphql",
      "content": "mutation UpdateCrdt($client: String!, $state: String!, $vector: String!){hasura_update_crdt(where: {client: {_eq: $client}}, _set: {state: $state,vector: $vector}){returning {id}}}"
    },
    {
      "operation_name": "UpsertClient",
      "api_mount_path": "UpsertClient",
      "file_path": "UpsertClient.graphql",
      "content": "mutation UpsertClient($client: hasura_clients_insert_input!){hasura_insert_clients_one(object: $client, on_conflict: {constraint: clients_client_unique,update_columns: [guid,vector]}){__typename id guid client}}"
    },
    {
      "operation_name": "UpsertCrdt",
      "api_mount_path": "UpsertCrdt",
      "file_path": "UpsertCrdt.graphql",
      "content": "mutation UpsertCrdt($client: String!, $crdt: hasura_crdt_set_input!){hasura_update_crdt(where: {client: {_eq: $client}}, _set: $crdt){returning {id}}}"
    }
  ],
  "typescript_operation_files": null
}